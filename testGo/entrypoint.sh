#!/bin/sh
set -e

cd /app

# Ensure config directories exist
mkdir -p /app/.cache/go-build /app/.cache/go-mod /app/.config/pdfcpu
# Ensure ent generated directories exist
mkdir -p /app/ent/generated/public

# Export important environment variables
export XDG_CONFIG_HOME=/app/.config
export GOCACHE=/app/.cache/go-build
export GOMODCACHE=/app/.cache/go-mod

# Get module name from go.mod
MODULE_NAME=$(grep "^module" go.mod | awk '{print $2}')
echo "Module name: ${MODULE_NAME}"

# Initialize any empty generated files with proper package declarations
initialize_generated_files() {
  echo "Initializing Ent generated directories..."
  for dir in $(find ent/generated -type d 2>/dev/null); do
    if [ -d "$dir" ]; then
      PKG_NAME=$(basename "$dir")
      if [ ! -f "$dir/runtime.go" ] || [ ! -s "$dir/runtime.go" ]; then
        echo "Creating package declaration for $dir/runtime.go"
        echo "// Code generated by entrypoint script. DO NOT EDIT.
package ${PKG_NAME}
" > "$dir/runtime.go"
      fi
    fi
  done
}

# Run Ent code generation
generate_ent_code() {
  if [ -f ent/entc.go ]; then
    echo "Running Ent code generation with entc.go..."
    go run -mod=mod ent/entc.go
    if [ $? -ne 0 ]; then
      echo "Error: Ent code generation failed"
      return 1
    fi
    echo "Ent code generation completed successfully"
    return 0
  else
    echo "ent/entc.go not found, skipping Ent code generation"
    return 0
  fi
}

# Main execution flow
echo "Preparing environment..."
initialize_generated_files

echo "Generating Ent code..."
if ! generate_ent_code; then
  echo "WARNING: Ent code generation failed, but will attempt to continue"
fi

echo "Starting application..."
exec go run -tags musl .