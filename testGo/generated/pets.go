// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"testGO/generated/pets"
	"testGO/generated/users"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Pets is the model entity for the Pets schema.
type Pets struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PetsQuery when eager-loading is set.
	Edges        PetsEdges `json:"edges"`
	users_pets   *uuid.UUID
	selectValues sql.SelectValues
}

// PetsEdges holds the relations/edges for other nodes in the graph.
type PetsEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Users `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PetsEdges) OwnerOrErr() (*Users, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pets) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pets.FieldIsActive:
			values[i] = new(sql.NullBool)
		case pets.FieldName, pets.FieldType:
			values[i] = new(sql.NullString)
		case pets.FieldID, pets.FieldUserID:
			values[i] = new(uuid.UUID)
		case pets.ForeignKeys[0]: // users_pets
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pets fields.
func (pe *Pets) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pets.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pe.ID = *value
			}
		case pets.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				pe.UserID = *value
			}
		case pets.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case pets.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pe.Type = value.String
			}
		case pets.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				pe.IsActive = value.Bool
			}
		case pets.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field users_pets", values[i])
			} else if value.Valid {
				pe.users_pets = new(uuid.UUID)
				*pe.users_pets = *value.S.(*uuid.UUID)
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Pets.
// This includes values selected through modifiers, order, etc.
func (pe *Pets) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Pets entity.
func (pe *Pets) QueryOwner() *UsersQuery {
	return NewPetsClient(pe.config).QueryOwner(pe)
}

// Update returns a builder for updating this Pets.
// Note that you need to call Pets.Unwrap() before calling this method if this Pets
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Pets) Update() *PetsUpdateOne {
	return NewPetsClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Pets entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Pets) Unwrap() *Pets {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("generated: Pets is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Pets) String() string {
	var builder strings.Builder
	builder.WriteString("Pets(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.UserID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(pe.Type)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", pe.IsActive))
	builder.WriteByte(')')
	return builder.String()
}

// PetsSlice is a parsable slice of Pets.
type PetsSlice []*Pets
