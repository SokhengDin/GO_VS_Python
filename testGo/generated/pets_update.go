// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"testGO/generated/pets"
	"testGO/generated/predicate"
	"testGO/generated/users"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PetsUpdate is the builder for updating Pets entities.
type PetsUpdate struct {
	config
	hooks    []Hook
	mutation *PetsMutation
}

// Where appends a list predicates to the PetsUpdate builder.
func (pu *PetsUpdate) Where(ps ...predicate.Pets) *PetsUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PetsUpdate) SetUserID(u uuid.UUID) *PetsUpdate {
	pu.mutation.SetUserID(u)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *PetsUpdate) SetNillableUserID(u *uuid.UUID) *PetsUpdate {
	if u != nil {
		pu.SetUserID(*u)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *PetsUpdate) SetName(s string) *PetsUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PetsUpdate) SetNillableName(s *string) *PetsUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetType sets the "type" field.
func (pu *PetsUpdate) SetType(s string) *PetsUpdate {
	pu.mutation.SetType(s)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *PetsUpdate) SetNillableType(s *string) *PetsUpdate {
	if s != nil {
		pu.SetType(*s)
	}
	return pu
}

// SetIsActive sets the "is_active" field.
func (pu *PetsUpdate) SetIsActive(b bool) *PetsUpdate {
	pu.mutation.SetIsActive(b)
	return pu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pu *PetsUpdate) SetNillableIsActive(b *bool) *PetsUpdate {
	if b != nil {
		pu.SetIsActive(*b)
	}
	return pu
}

// SetOwnerID sets the "owner" edge to the Users entity by ID.
func (pu *PetsUpdate) SetOwnerID(id uuid.UUID) *PetsUpdate {
	pu.mutation.SetOwnerID(id)
	return pu
}

// SetNillableOwnerID sets the "owner" edge to the Users entity by ID if the given value is not nil.
func (pu *PetsUpdate) SetNillableOwnerID(id *uuid.UUID) *PetsUpdate {
	if id != nil {
		pu = pu.SetOwnerID(*id)
	}
	return pu
}

// SetOwner sets the "owner" edge to the Users entity.
func (pu *PetsUpdate) SetOwner(u *Users) *PetsUpdate {
	return pu.SetOwnerID(u.ID)
}

// Mutation returns the PetsMutation object of the builder.
func (pu *PetsUpdate) Mutation() *PetsMutation {
	return pu.mutation
}

// ClearOwner clears the "owner" edge to the Users entity.
func (pu *PetsUpdate) ClearOwner() *PetsUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PetsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PetsUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PetsUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PetsUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PetsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pets.Table, pets.Columns, sqlgraph.NewFieldSpec(pets.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.SetField(pets.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(pets.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(pets.FieldType, field.TypeString, value)
	}
	if value, ok := pu.mutation.IsActive(); ok {
		_spec.SetField(pets.FieldIsActive, field.TypeBool, value)
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pets.OwnerTable,
			Columns: []string{pets.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pets.OwnerTable,
			Columns: []string{pets.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pets.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PetsUpdateOne is the builder for updating a single Pets entity.
type PetsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PetsMutation
}

// SetUserID sets the "user_id" field.
func (puo *PetsUpdateOne) SetUserID(u uuid.UUID) *PetsUpdateOne {
	puo.mutation.SetUserID(u)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *PetsUpdateOne) SetNillableUserID(u *uuid.UUID) *PetsUpdateOne {
	if u != nil {
		puo.SetUserID(*u)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *PetsUpdateOne) SetName(s string) *PetsUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PetsUpdateOne) SetNillableName(s *string) *PetsUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetType sets the "type" field.
func (puo *PetsUpdateOne) SetType(s string) *PetsUpdateOne {
	puo.mutation.SetType(s)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *PetsUpdateOne) SetNillableType(s *string) *PetsUpdateOne {
	if s != nil {
		puo.SetType(*s)
	}
	return puo
}

// SetIsActive sets the "is_active" field.
func (puo *PetsUpdateOne) SetIsActive(b bool) *PetsUpdateOne {
	puo.mutation.SetIsActive(b)
	return puo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (puo *PetsUpdateOne) SetNillableIsActive(b *bool) *PetsUpdateOne {
	if b != nil {
		puo.SetIsActive(*b)
	}
	return puo
}

// SetOwnerID sets the "owner" edge to the Users entity by ID.
func (puo *PetsUpdateOne) SetOwnerID(id uuid.UUID) *PetsUpdateOne {
	puo.mutation.SetOwnerID(id)
	return puo
}

// SetNillableOwnerID sets the "owner" edge to the Users entity by ID if the given value is not nil.
func (puo *PetsUpdateOne) SetNillableOwnerID(id *uuid.UUID) *PetsUpdateOne {
	if id != nil {
		puo = puo.SetOwnerID(*id)
	}
	return puo
}

// SetOwner sets the "owner" edge to the Users entity.
func (puo *PetsUpdateOne) SetOwner(u *Users) *PetsUpdateOne {
	return puo.SetOwnerID(u.ID)
}

// Mutation returns the PetsMutation object of the builder.
func (puo *PetsUpdateOne) Mutation() *PetsMutation {
	return puo.mutation
}

// ClearOwner clears the "owner" edge to the Users entity.
func (puo *PetsUpdateOne) ClearOwner() *PetsUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// Where appends a list predicates to the PetsUpdate builder.
func (puo *PetsUpdateOne) Where(ps ...predicate.Pets) *PetsUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PetsUpdateOne) Select(field string, fields ...string) *PetsUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pets entity.
func (puo *PetsUpdateOne) Save(ctx context.Context) (*Pets, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PetsUpdateOne) SaveX(ctx context.Context) *Pets {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PetsUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PetsUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PetsUpdateOne) sqlSave(ctx context.Context) (_node *Pets, err error) {
	_spec := sqlgraph.NewUpdateSpec(pets.Table, pets.Columns, sqlgraph.NewFieldSpec(pets.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Pets.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pets.FieldID)
		for _, f := range fields {
			if !pets.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != pets.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.SetField(pets.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(pets.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(pets.FieldType, field.TypeString, value)
	}
	if value, ok := puo.mutation.IsActive(); ok {
		_spec.SetField(pets.FieldIsActive, field.TypeBool, value)
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pets.OwnerTable,
			Columns: []string{pets.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pets.OwnerTable,
			Columns: []string{pets.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pets{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pets.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
